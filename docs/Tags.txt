Template authoring guide
========================

This document describes available variables and functions in 
Easy Template template products. Some example template snippets
are included.

Introduction
============

Jinja template engine is used. The template engine is switchable,
so you can switch it to your preferred template engine with little trouble.

For available Jinja language constructs,
please consult `Jinja documentation <http://jinja.pocoo.org/2/documentation/templates>`_.

The default Jinja backend exposes Python functions as functions,
so you need to add () after them to get a sensible value out of the function.

Template context
================

Template context holds the top level variables you have available in 
your template. This is defined in `context/plone.py <https://dev.plone.org/collective/browser/collective.templateengines/trunk/collective/templateengines/context/plone.py>`_.

Archetypes based objects
------------------------

Archetypes based objects are exposed as is to the template engine.

You can call getXXX functions and other schema accessor functions to query 
individual fields values. These field expositions depend on the manipulated
object and are defined in the object schema file::

   {{ context.Title() }}
   
   {{ context.getBody() }} 

If you have a write access to the object you can even set values, though this is 
not useful::

   {{ context.setTitle('Moo the novel') }}
 
 
context
-------

Context is the current Template Document object. You can use context to
access.
	
Traversing
----------

To access the other objects beside the current Template Document you can traverse
in the folder hierarchy using Zope's traversing mechanism.

Get the parent folder::

  {{ context.aq_parent }}
  
Get the sister page (in the same folder) with URL id 'sister':

  {{ context.aq_parent.sister }}

portal
------

Portal is the root Plone object of your site. You can use it as a traversing
start point to query other objects on your site. E.g.

Some of available methods are described in IPortal interface.

To access the top level news folder:

   {{ portal.news }}
   
portal_state
------------

Information about the current state of the system. Tells things like if the user is logged
in, navigation base, portal title, active language and so on.

This object implements `IPortalState <https://svn.plone.org/svn/plone/plone.app.layout/trunk/plone/app/layout/globals/interfaces.py>`_ interface.

Example::

	{% if portal_state.anonymous() %}
		anon
	{% else %}
		logged in
	{% endif %}
   
user
----

User variable holds the current user security information. 

This implements `Basic user <http://api.plone.org/Plone/3.0/public/products/PluggableAuthService/AccessControl.User.BasicUser-class.html>`_ interface.

The most useful feature is getting the current username via getUserName().


member
------

User membership information. This information depends on the used 
member backend (Plone default, LDAP, SQL, custom...).

TODO: Finish
 
portal_url
----------

Plone portal_url tool. Call to return the site root url.

Example::

	<a href="{{ portal_url() }}">Home</a>

Tags
====

These are custom functions you are able to use in your tags.
They are registered in tagconfig.py file in the product folder.

explore
-------

Dump object methods and variables for developer consumption.

**You want to disable this tag on production site, since it is
read priviledge escalation. You have been warned **.

Explore tag helps you to build scripts by exposing what the objects have eaten.
It prints a tabular output of available methods and variables.

**Parameters**:

*object*: Object to explore

Show the guts of current Templated Document object::

	{{ explore(context) }}
	
Show what we have in the portal root::

	{{ explore(portal) }}
	
Show what was returned by a function which returns a list - take the first element::

	{{ explore(query({portal_type="Folder})[0]) }}


query
-----

Return site objects based on search criteria.

Query returns the list of site objects as returned by portal_catalog
search. The objects are catalog brains: dictionaries containing 
metadata ids as key.

See ZMI portal_catalog tool for avaiable query index and returned metadata fields.

Key-value pairs are taken as the parameters and they are directly passed to 
the portal_catalog search.

The output is limited by the current user permissions.

**Parameters**:

- *searchParameters*: Python dictionary of portal_catalog query parameters. index->query mappings. Bad index id does not seem to raise any kind of an error.

**Return value**:

- List of ZCatalog brain objects. Brain objects have methods getURL, getPath and getObject and dictionary look up for catalog metadata columns.

**Examples**

Return the three most fresh News Item objects sorted by date::

	{{ query({"portal_type":"News Item","sort_on":"Date","sort_order":"reverse","sort_limit":1,"review_state":"published"}) }}
	
Return all items in one folder::

	{{ query({path={"query" : "/folder", depth: 0}}) }}
	
Render the latest news item, with news image attached:

{{ query({portal_type="News Item", sort_on="Date", sort_order="reverse", sort_limit=3}) }}
	
	
For more information about possible query formats see `this old document <http://www.zope.org/Documentation/Books/ZopeBook/2_6Edition/SearchingZCatalog.stx>`_.

view
----

Render a browser:page based view. If there is no registered view for id, return a placeholder string.

Parameter *name*: View id, as it appears in browser/configure.zcml.

Parameter *function*: Optional. View instance method name to be called. If omitted, __call__() is used.

Example (render sitemap)::

   {{ view("sitemap_view", "createSiteMap") }}


viewlet
-------

Render a viewlet. 

Parameter *name*: Viewlet id as it appears on portal_view_customizations ZMI page.

Example::

   {{ viewlet("portal.logo") }}


rss_feed
--------

The function reads RSS feed. You can iterate manually through entries
and format the output. This is mostly suitable when dealing with HTML
source code.

**Parameters**

- *url*: URL to RSS or RSS

- *cache_timeout: Optional, default value 60. Seconds how often the HTTP GET request should be performed.

**Return**

- List of dictionaries with following keys: *title*, *summary*, *url*, *updated* and *friendly_date*.

Example (raw HTML edit)::

	{% for entry rss_feed("http://blog.redinnovation.com/feed/") %}
		<p>
			<b>Title:</b> 	
			<span>{{ entry.title }}
		</p>
		
		<p>
			<b>Summary:</b> 	
			<span>{{ entry.summary }}
		</p>		
	{% endfor %}
	
plone.app.portlets.rss.RSSFeed is used as the RSS reader backend.
	
list_folder
-----------

List folder content and return the output as <ul> tag. Mostly suitable for 
testing and simplified folder output generating in portlets.

Note: You might want to use query() tag serch limited by path for more powerful output formatting.

**Parameters**

- *folder*: The path to the listed folder. Same as the URI path on the site.

- *title*: Render this title for the listing as a subheading

- *filters*: portal_catalog query parameters to be applied for the output. See query() below for examples.

- *exclude_self*: If True do not render context Templated Document in the outpput

- *extra_items*: String of comma separated entries of URIs which are outside the target folder, but should be appended to the listing.

**Example (create a course module listing from a course folder)**::

	{{ list_folder("courses/marketing/cim-professional-certificate-in-marketing", title="Other modules in this course:", filters={ "portal_type" : "Module"}) }}
	
latest_news
-----------

Render list of latest published news from the site. Users collective.easytemplate.tags/latest_news.pt template.

latest_news also serves as an example how to drop a custom view onto Kupu page.

**Parameters**

- *count*: How many items are rendered

**Example**::

	{{ latest_news(3) }}


translate
---------

Translation catalog look up with an message id.

Translates the message to another language. The function assumes 
the translation is available in po files.

**Parameters**

- *message*: gettext msgid to translate

- *domain*: gettext domain where the message belongs, optional, defaults to "plone"

- *language*: target language code, e.g. fi, optional, defaults to the currently selected language

- *default*: The default value to be displayed if the msgid is missing for the selected langauge

** Return **

- translated string

** Examples **::

	{{ translate("missing_id", default="Foobar")  }}
	
	{{ translate("box_more_news_link", "plone", "fi")  }}
	
	
For available default Plone msgids, see `PloneTranslations product source <https://dev.plone.org/collective/browser/PloneTranslations/trunk/i18n>`_
	
current_language
----------------

Get the current language for the user.

This enables conditional showing based on the language.

** Parameters **

- No parameters

** Return **

- The current language code as a string, e.g. "fi"

** Example **::

	{% if current_language() == "fi" %}
		Päivää
	{% else %}
		Hello
	{% endif %}


Advanced examples
=================

News & blog table
-----------------

The following snippet will create a table with two columns. The
left column is filled with a summary and link to all published news on the site.
The right column is filled with links to external blog entries, taken from 
a RSS feed. The news query is language sensitive - only news for the 
current active language are shown.

Both columns are limited to three entries.

The text is translated and when the default Plone translation catalogs
lack suitable msgids, a custom translation catalog *twinapex* is used.

This example must be put into unfiltered template input box,
since Kupu seems to insert unwanted &nbsp; characters into the code.

**Example**::

	<table class="front-page two-column">
		<tbody>
			<tr>
				<td class="column-2">
					<h2>
						<a href="{{ portal_url() }}/news">
							{{ translate("news", "twinapex") }}						
						</a>
					</h2>					
					{% for item in query({"portal_type":"News Item", "review_state" : "published", "sort_on":"Date", "sort_order":"reverse", "sort_limit":3}) %}
						<div class="fp-item">
							<a href="{{ item.getURL() }}">{{ item.Title }}</a>
							<p>
								{{ item.Description }}
							</p>
							
							<p class="timestamp">{{ item.Date }}</p>
						</div>
					{% endfor %}
					
					<p class="more">
						<a class="more" href="{{ portal_url() }}/news">
							{{ translate("box_more_news_link", default="More news...") }}
						</a>				
					</p>
				</td>
				<td class="column-2">
					<h2>
						<a href="{{ portal_url() }}/news">
							{{ translate("blog", "twinapex") }}
						</a>
					</h2>									
					{% for item in rss_feed("http://blog.redinnovation.com/feed/")[0:3] %}
						<div class="fp-item">
							<a href="{{ item.url }}">{{ item.title }}</a>
							<p class="timestamp">{{ item.friendly_date }}</p>						
						</div>
					{% endfor %}
	
					<p class="more">
						<a class="more" href="http://blog.twinapex.fi">
							{{ translate("box_morelink", default="More...") }}
						</a>
					</p>
				</td>
			</tr>
		</tbody>
	</table>

Debugging tips
==============

If the template compilation fails you might have made copy-paste errors.
Please view the template in raw HTML mode to track down the errors:

* HTML tags inside a template expression

* Hard line breaks inside a template expression
